Модуль update_spawn_rune_test

	Описание процесса:Функция update_spawn_rune осуществляет обработку анимации руны ,
							расположенной на игровом поле или генерирует координаты для новой руны
 							по истечении обределённого количества времени.

	Метод PositiveTest_UpdateSpawnRune

		ТЕСТ №1 (ChoosingRuneCoordinates)
			Цель:Произвести генерацию координат руны для её отрисовки на игровом поле.
			Тип:позитивный.
			Входные данный:в классе toolbar поднимаем флаг в переменной 
								  randomizeCoordinates(присваеваем значение true)
								  для генерации нового расположения руны.

			Ожидаемый результат:если генерация координат для новой руны прошла успешно,
										то в переменной randomizeCoordinates будет значение false.

		ТЕСТ №2 (UpdateRuneFrame)
			Цель:Произвести смену кадра сгенерированной руны для её анимации на игровом поле.
				     Проверка на смену кадра проводится для всех(четырёх) рун.

			Тип:позитивный.
			Входные данный:в классе toolbar указываем тип руны,
								  анимацию которой должна обрабатывать данная функция(update_spawn_rune).
			
			Ожидаемый результат:если смена кадра прошла успешно,то в классе выводимой
									       руны переменная current_frame будет увеличена на единицу.
										(в нашем слечае current_frame изменилась с 0 на 1).

	Метод NegativeTest_UpdateSpawnRune
	
		ТЕСТ №1 (UnititilizedTypeRune)
			Цель:Обработать случай неопределённого типа руны,которую хотят вывести на игровое поле.
			Тип:негативный.

			Входные данный:в классе toolbar переменной typeRamdomedRune присваем значение,
						                  не относящееся к типу инициализированных рун.
						
			Ожидаемый результат:после обработки функцией update_spawn_rune неверного типа руны,
									       в переменной typeRandomedRune класса toolbar будет лежать значение -1.


Модуль take_rune_test

	Описание процесса:Функция take_rune осуществляет обработку взаимодействия между 
							руной и главныйм героем(танком).Если руна находтся в прямоугольнике
							спрайта главного героя,то к нему применяется соответсятвующий эффект
							(в зависимости от типа руны).

	Метод PositiveTest_TakeRune

		ТЕСТ №1 (DeterminatedTypeRune)
			Цель:Проверка на желаемую обработку ситуации ,когда спрайты главного героя и руны не
				     пересекаются(взаимодействия не происходит).
				     Проверка производится для всех(четырёх) типов рун.
			Тип:позитивный.

			Входные данный:Указываем позицию руны на карте таким образом,
								  чтобы она не пересекалась со спрайтом главного героя.
								  В переменную typeRandomedRune класса toolbar записываем
								  тип отображаемой руны.

			Ожидаемый результат:После работы функции take_rune ,переменная typeRandomedRune
									       должна сохранить своё начальное значение типа отображаемой руны
									       для дальнейшей обработки в цикле игры.

		ТЕСТ №2 (DeterminatedRuneInHeroArea)
			Цель:Проверка на желаемую обработку ситуации ,когда спрайты главного героя и руны
				     пересекаются(происходит взаимодействия).
			Тип:позитивный.

			Входные данный:Указываем позицию руны на карте таким образом,
								  чтобы она  пересекалась со спрайтом главного героя.
								  В переменную typeRandomedRune класса toolbar записываем
								  тип отображаемой руны.
								   Проверка производится для всех(четырёх) рун.
			
			Ожидаемый результат:после работы функции take_rune, в переменную класса toolbar
									       typeRandomedRune будет записано значение -1
									       (вывод руны на игровом поле прекращён).

	Метод NegativeTest_TakeRune
	
		ТЕСТ №1 (UnititilizedTypeRune)
			Цель:Проверка на желаемую обработку ситуации ,когда пытается произвестись обработка
				      взаимодействия с руной , не существующего типа.
			Тип:негативный.

			Входные данный:в переменную типа typeRandomedRune помещаем значение, не относящееся
								 к типам инициализированных рун.

			Ожидаемый результат:после обработки данного значение функцией take_rune,
										в переменную typeRandomedRune будет помещено значение -1.

Модуль randomize_rune_coordinates_test

	Описание процесса:Функция randomize_rune_coordinates осуществляет генерацию координат
						         для расположения руны на игровом поле.

	Метод PositiveTest_RandomizeRuneCoordinates

		ТЕСТ №1 (DeterminatedTypeRune)
			Цель:Обработать ситуацию,когда сгенерированные координаты присваюваются спрайту руны
				      инициализированного типа.
			Тип:позитивный.

			Входные данный:в переменную typeRandomedRune помещаем инициализорованный тип руны,
								  для которой мы хотим сгенерировать координаты расположения на игровом поле.
								 Проверка осуществляется для всех(четырёх) рун.

			Ожидаемый результат:после работы функции randomize_rune_coordinates ,в переменной
									       typeRandomedRune будет храниться значение типа руны , для
										которой мы генерировали координаты.

	Метод  NegativeTest_RandomizeRuneCoordinates
	
		ТЕСТ №1 (UninitializedTypeRune)
			Цель:Обработать ситуацию,когда сгенерированные координаты присваюваются спрайту руны
				      не инициализированного типа.
			Тип:негативный.

			Входные данный:помещаем в переменную typeRandomedRune  значение, не относящееся
								 к типам инициализорованных рун
			
			Ожидаемый результат: после работы randomize_rune_coordinates в переменную
										typeRandomedRune будет помещено значение -1.		


Модуль move_hero_test

	Описание процесса:Функция move_hero осуществляет движение главного героя по игровому полу.

	Метод PositiveTest_MoveHero

		ТЕСТ №1 (CheckMoving)
			Цель:Получить желаемое поведение героя игры(танка) при 
				     нажатии клавиш управления(w,a,s,d,стрелки).
				     Проверка осуществляется для всех(четырёх) направлений.
			Тип:позитивный.

			Входные данный:в конструкторе класса Hero спрайту главного героя присваиваются 
								  координаты (200,200) на игровом поле.
								  Скорость движения будет равна 9 пикселям.
								   Последовательно в функцию move_hero посылаются флаги движения героя:
								0-вверх,1-вправо,2-вниз,3-влево.									
			
			Ожидаемый результат:после применения функции move_hero для каждого из помещённых 
									       значений флагов движения,координаты главного героя будут менятся так:
										(200,191),(209,191),(209,200),(200,200).

	Метод NegetiveTest_MoveHero
	
		ТЕСТ №1 (TryCrossMapBorder)
			Цель:Получить желаемое поведение героя игры(танка) при столкновении
				     с границей игровой зоны( обозначенного окна игры).
			            Проверка осуществляется для всех(четырёх) границ игрового поля.
			Тип:негативный.

			Входные данный:присваеваем спрайту главного героя такие значения, что при последующем
								  движении в сторону тестируемой границы, он выйдет за пределы игрового поля.
			
			Ожидаемый результат:после работы функции move_hero,координаты главного героя и  соответствующей точки границы игрового поля
									 	будут совпадать или будут отличаться на  hero.w по оси x или на hero.h по оси y.

		ТЕСТ №2 (TryMoveAcrossBase)
			Цель:Получить желаемое поведение героя игры(танка) 
				     при столновении с объектом(базой).
				     Проверка осуществляется для всех(четырёх) сторон базы.
			Тип:негативный.

			Входные данный:присваеваем спрайту главного героя такие значения, что при последующем
								  движении в сторону тестируемой границы, он  её переедет.
			
			Ожидаемый результат:после работы функции move_hero, координаты главного героя и соответствующей точки стороны базы
									 	будут совпадать или будут отличаться на  hero.w по оси x или на hero.h по оси y.



